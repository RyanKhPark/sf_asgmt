// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  conversations Conversation[]
  annotations   Annotation[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  filename    String
  fileUrl     String?  // URL to stored PDF file
  fileSize    Int?
  totalPages  Int?     // Total number of pages
  extractedText String? @db.Text // Full extracted text for search
  aiSummary   String?  @db.Text // AI-generated document summary
  processingStatus String @default("pending") // pending, processing, completed, failed
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  pages         DocumentPage[]
  conversations Conversation[]
  annotations   Annotation[]

  @@map("documents")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  documentId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("conversations")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String   // "user" or "assistant"
  createdAt DateTime @default(now())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  highlights MessageHighlight[]

  @@map("messages")
}

// Store extracted text and metadata for each PDF page
model DocumentPage {
  id          String @id @default(cuid())
  pageNumber  Int
  extractedText String @db.Text
  width       Float? // Page dimensions for coordinate mapping
  height      Float?

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, pageNumber])
  @@map("document_pages")
}

// AI-generated highlights and user annotations
model Annotation {
  id          String   @id @default(cuid())
  type        String   // "highlight", "note", "ai_highlight"
  content     String?  @db.Text // Annotation content/note
  highlightText String @db.Text // The actual highlighted text

  // Coordinate data for PDF positioning
  pageNumber  Int
  x           Float    // X coordinate (percentage or absolute)
  y           Float    // Y coordinate
  width       Float    // Width of highlight
  height      Float    // Height of highlight

  color       String   @default("#ffff00") // Highlight color
  createdBy   String   // "user" or "ai"
  createdAt   DateTime @default(now())

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messageHighlights MessageHighlight[]

  @@map("annotations")
}

// Link AI highlights to specific messages for context
model MessageHighlight {
  id String @id @default(cuid())

  messageId    String
  message      Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  annotationId String
  annotation   Annotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)

  @@unique([messageId, annotationId])
  @@map("message_highlights")
}